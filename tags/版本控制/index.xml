<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>版本控制 on Rogee's 备忘录</title><link>http://notes.711xd.com/tags/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/</link><description>Recent content in 版本控制 on Rogee's 备忘录</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>Rogee</copyright><lastBuildDate>Wed, 08 Dec 2021 09:25:37 +0800</lastBuildDate><atom:link href="http://notes.711xd.com/tags/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/index.xml" rel="self" type="application/rss+xml"/><item><title>Git Stash 用法小结</title><link>http://notes.711xd.com/post/git-stash/</link><pubDate>Wed, 08 Dec 2021 09:25:37 +0800</pubDate><guid>http://notes.711xd.com/post/git-stash/</guid><description>&lt;h2 id="git-stash-git-储藏-可用于以下情形">git stash (git 储藏) 可用于以下情形&lt;/h2>
&lt;ul>
&lt;li>发现有一个类是多余的, 想删掉它又担心以后需要查看它的代码, 想保存它但又不想增加一个脏的提交. 这时就可以考虑 git stash.&lt;/li>
&lt;li>使用 git 的时候, 我们往往使用分支 (branch) 解决任务切换问题, 例如, 我们往往会建一个自己的分支去修改和调试代码, 如果别人或者自己发现原有的分支上有个不得不修改的 bug, 我们往往会把完成一半的代码 commit 提交到本地仓库, 然后切换分支去修改 bug, 改好之后再切换回来. 这样的话往往 log 上会有大量不必要的记录. 其实如果我们不想提交完成一半或者不完善的代码, 但是却不得不去修改一个紧急 Bug, 那么使用 git stash 就可以将你当前未提交到本地 (和服务器) 的代码推入到 Git 的栈中, 这时候你的工作区间和上一次提交的内容是完全一样的, 所以你可以放心的修 Bug, 等到修完 Bug, 提交到服务器上后, 再使用 git stash apply 将以前一半的工作应用回来.&lt;/li>
&lt;li>经常有这样的事情发生, 当你正在进行项目中某一部分的工作, 里面的东西处于一个比较杂乱的状态, 而你想转到其他分支上进行一些工作. 问题是, 你不想提交进行了一半的工作, 否则以后你无法回到这个工作点. 解决这个问题的办法就是 git stash 命令. 储藏 (stash) 可以获取你工作目录的中间状态——也就是你修改过的被追踪的文件和暂存的变更——并将它保存到一个未完结变更的堆栈中, 随时可以重新应用.&lt;/li>
&lt;/ul></description></item></channel></rss>